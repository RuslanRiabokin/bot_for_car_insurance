from openai import AzureOpenAI
from openai.types.chat import ChatCompletionMessageParam
from aiogram.fsm.context import FSMContext

from config import AZURE_OPENAI_KEY, AZURE_OPENAI_ENDPOINT, AZURE_OPENAI_DEPLOYMENT_ID


async def ask_ai(question: str, state: FSMContext) -> str:
    system_prompt = """
    –¢–∏ ‚Äî –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ –∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∞–≤—Ç–æ—Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –≤ –£–∫—Ä–∞—ó–Ω—ñ.
    –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —è–∫ –ª—é–¥–∏–Ω–∞: —á–µ–º–Ω–æ, –∑—Ä–æ–∑—É–º—ñ–ª–æ, –∞–ª–µ –ø–æ —Å—É—Ç—ñ.

    üîπ –í –∫–æ–∂–Ω—ñ–π –ø–µ—Ä—à—ñ–π –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:
    ‚Äî –ü–æ–ø—Ä–æ—Å–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ —Ç–∞ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞.

    üîπ –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–∏—Ç–∞—î –ø—Ä–æ —â–æ—Å—å –Ω–µ –ø–æ–≤'—è–∑–∞–Ω–µ –∑—ñ —Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∞–≤—Ç–æ ‚Äî –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π:
    ‚Äú–Ø –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ –ª–∏—à–µ –∑—ñ —Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∞–≤—Ç–æ.‚Äù

    –í—ñ–¥–ø–æ–≤—ñ–¥—ñ –º–∞—é—Ç—å –±—É—Ç–∏ –∫–æ—Ä–æ—Ç–∫–∏–º–∏, –∞–ª–µ –¥—Ä—É–∂–Ω—ñ–º–∏, —è–∫ –≤—ñ–¥ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–º—ñ—á–Ω–∏–∫–∞.
    """

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    history: list[ChatCompletionMessageParam] = data.get("chat_history", [])

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –µ—â–µ –Ω–µ—Ç
    if not history:
        history.append({"role": "system", "content": system_prompt})

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    history.append({"role": "user", "content": question})

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Azure OpenAI
        client = AzureOpenAI(
            api_key=AZURE_OPENAI_KEY,
            api_version="2024-02-01",
            azure_endpoint=AZURE_OPENAI_ENDPOINT,
        )

        # –ó–∞–ø—Ä–æ—Å –∫ AI —Å –∏—Å—Ç–æ—Ä–∏–µ–π
        response = client.chat.completions.create(
            model=AZURE_OPENAI_DEPLOYMENT_ID,
            messages=history
        )

        ai_reply = response.choices[0].message.content.strip()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç AI –≤ –∏—Å—Ç–æ—Ä–∏—é
        history.append({"role": "assistant", "content": ai_reply})

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –≤ FSMContext
        await state.update_data(chat_history=history)

        return ai_reply

    except Exception as e:
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ AI: {str(e)}"
