import os
from uuid import uuid4
from aiogram import Router, F, types
from aiogram.filters import Command

from ai_provider import ask_ai

router = Router()
TEMP_DIR = "temp"
os.makedirs(TEMP_DIR, exist_ok=True)

# –ü—Ä–∏–º—ñ—Ç–∏–≤–Ω–µ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É (–≤ –ø–∞–º'—è—Ç—ñ)
user_states = {}  # user_id -> {"docs_received": 0}

def get_user_state(user_id: int) -> dict:
    if user_id not in user_states:
        user_states[user_id] = {"docs_received": 0}
    return user_states[user_id]

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = {"docs_received": 0}

    response = ask_ai("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ä–æ–∑–ø–æ—á–∞–≤ –¥—ñ–∞–ª–æ–≥. –ü—Ä–∏–≤—ñ—Ç–∞–π—Å—è —Ç–∞ –ø–æ–ø—Ä–æ—Å–∏ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏.")
    await message.answer(response)



@router.message(F.photo | F.document)
async def handle_documents(message: types.Message):
    user_id = message.from_user.id
    file = message.photo[-1] if message.photo else message.document
    file_name = f"{user_id}_{uuid4().hex}.jpg"
    path = os.path.join(TEMP_DIR, file_name)
    await message.bot.download(file, destination=path)

    # –û—Ç—Ä–∏–º—É—î–º–æ –∞–±–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å—Ç–∞–Ω
    state = user_states.setdefault(user_id, {"docs_received": 0})
    state["docs_received"] += 1

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ, —è–∫–µ —Ü–µ —Ñ–æ—Ç–æ
    if state["docs_received"] == 1:
        prompt = "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–¥—ñ—Å–ª–∞–≤ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞. –ü–æ–¥—è–∫—É–π —ñ –ø–æ–ø—Ä–æ—Å–∏ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç."
    elif state["docs_received"] == 2:
        prompt = (
            "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ä–∞–Ω—ñ—à–µ –Ω–∞–¥—ñ—Å–ª–∞–≤ –ø–∞—Å–ø–æ—Ä—Ç. –¢–µ–ø–µ—Ä –≤—ñ–Ω –Ω–∞–¥—ñ—Å–ª–∞–≤ —Ñ–æ—Ç–æ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞. "
            "–ü–æ–¥—è–∫—É–π –∑–∞ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç —ñ —Å–∫–∞–∂–∏, —â–æ –∑–∞—Ä–∞–∑ –≤–∏—Ç—è–≥—É—î—à —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ –æ–±–æ—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∞–≤—Ç–æ—Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è."
        )
    else:
        prompt = "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–¥—ñ—Å–ª–∞–≤ —â–µ –æ–¥–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—ñ—Å–ª—è –æ–±–æ—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤. –ü–æ–¥—è–∫—É–π —ñ —Å–∫–∞–∂–∏, —â–æ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –≤–∂–µ –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è."

    response = ask_ai(prompt)
    await message.answer(response)


@router.message(F.text)
async def handle_text(message: types.Message):
    await message.answer("ü§ñ –û–±—Ä–æ–±–ª—è—é –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è AI...")
    try:
        response = ask_ai(message.text)
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ AI: {e}")
        return
    await message.answer(response.strip())
