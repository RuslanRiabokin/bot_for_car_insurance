import os
from uuid import uuid4
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.types import CallbackQuery


from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from ai_provider import ask_ai

router = Router()
TEMP_DIR = "temp"
os.makedirs(TEMP_DIR, exist_ok=True)

# –ü—Ä–∏–º—ñ—Ç–∏–≤–Ω–µ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É (–≤ –ø–∞–º'—è—Ç—ñ)
user_states = {}  # user_id -> {"docs_received": 0}

def get_user_state(user_id: int) -> dict:
    if user_id not in user_states:
        user_states[user_id] = {"docs_received": 0}
    return user_states[user_id]

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = {"docs_received": 0}

    response = ask_ai("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ä–æ–∑–ø–æ—á–∞–≤ –¥—ñ–∞–ª–æ–≥. –ü—Ä–∏–≤—ñ—Ç–∞–π—Å—è —Ç–∞ –ø–æ–ø—Ä–æ—Å–∏ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏.")
    await message.answer(response)



@router.message(F.photo | F.document)
async def handle_documents(message: types.Message):
    user_id = message.from_user.id
    file = message.photo[-1] if message.photo else message.document
    file_name = f"{user_id}_{uuid4().hex}.jpg"
    path = os.path.join(TEMP_DIR, file_name)
    await message.bot.download(file, destination=path)

    # –û—Ç—Ä–∏–º—É—î–º–æ –∞–±–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å—Ç–∞–Ω
    state = user_states.setdefault(user_id, {"docs_received": 0, "extracted": False})
    state["docs_received"] += 1

    if state["docs_received"] == 1:
        prompt = (
            "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–¥—ñ—Å–ª–∞–≤ –ø–µ—Ä—à–µ —Ñ–æ—Ç–æ ‚Äî —Ü–µ –ø–∞—Å–ø–æ—Ä—Ç. –ü–æ–¥—è–∫—É–π –∑–∞ –ø–∞—Å–ø–æ—Ä—Ç —ñ —Å–∫–∞–∂–∏, "
            "—â–æ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∞–≤—Ç–æ—Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ —â–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞."
        )
        response = ask_ai(prompt)
        await message.answer(response)

    elif state["docs_received"] == 2:
        state["extracted"] = True
        prompt = (
            "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ä–∞–Ω—ñ—à–µ –Ω–∞–¥—ñ—Å–ª–∞–≤ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞. –¢–µ–ø–µ—Ä –≤—ñ–Ω –Ω–∞–¥—ñ—Å–ª–∞–≤ —Ñ–æ—Ç–æ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞. "
            "–ü–æ–¥—è–∫—É–π –∑–∞ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç —ñ —Å–∫–∞–∂–∏, —â–æ –∑–∞—Ä–∞–∑ –≤–∏—Ç—è–≥—É—î—à —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ –æ–±–æ—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∞–≤—Ç–æ—Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è."
        )
        response = ask_ai(prompt)
        await message.answer(response)

        # –í–∏–≤–æ–¥–∏–º–æ "–≤–∏—Ç—è–≥–Ω—É—Ç—ñ" (—Ñ—ñ–∫—Å–æ–≤–∞–Ω—ñ) –¥–∞–Ω—ñ
        extracted_data = {
            "–ü–Ü–ë": "–ë–æ–Ω–¥–∞—Ä–µ–Ω–∫–æ –í–∞—Å–∏–ª–∏–π –í–∞—Å–∏–ª—å–µ–≤–∏—á",
            "–ù–æ–º–µ—Ä –∞–≤—Ç–æ": "KE1234AE",
            "VIN": "VF1ABC1234567890",
            "–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è": "01.01.1990"
        }

        formatted_data = "\n".join(f"‚Ä¢ {k}: {v}" for k, v in extracted_data.items())
        await message.answer(f"üìÑ –û—Å—å —è–∫—ñ –¥–∞–Ω—ñ –≤–¥–∞–ª–æ—Å—è –≤–∏—Ç—è–≥–Ω—É—Ç–∏ –∑ –≤–∞—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤:\n\n{formatted_data}")

        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –¥–∞–Ω—ñ", callback_data="confirm_data")],
            [InlineKeyboardButton(text="‚ùå –î–∞–Ω—ñ –Ω–µ –ø—ñ–¥—Ö–æ–¥—è—Ç—å", callback_data="reject_data")]
        ])
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å, —á–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ:", reply_markup=keyboard)
    else:
        prompt = (
            "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–¥—ñ—Å–ª–∞–≤ –¥–æ–¥–∞—Ç–∫–æ–≤–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—ñ—Å–ª—è –ø–∞—Å–ø–æ—Ä—Ç–∞ —ñ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞. "
            "–ü–æ–¥—è–∫—É–π –∑–∞ —Ñ–æ—Ç–æ —ñ —Å–∫–∞–∂–∏, —â–æ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –≤–∂–µ –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è, –Ω–æ–≤—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ–∫–∏ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω—ñ."
        )
        response = ask_ai(prompt)
        await message.answer(response)


@router.callback_query(F.data == "reject_data")
async def handle_rejected_data(callback: CallbackQuery):
    user_id = callback.from_user.id

    # –í–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ø–∞–ø–∫–∏ temp
    for filename in os.listdir(TEMP_DIR):
        if filename.startswith(str(user_id)):
            file_path = os.path.join(TEMP_DIR, filename)
            try:
                os.remove(file_path)
            except Exception as e:
                print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ {file_path}: {e}")

    # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω
    user_states[user_id] = {"docs_received": 0, "extracted": False}

    # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    await callback.message.answer("‚ùå –ó—Ä–æ–∑—É–º—ñ–ª–æ. –î–∞–≤–∞–π—Ç–µ —Å–ø—Ä–æ–±—É—î–º–æ —â–µ —Ä–∞–∑.\n–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞.")
    await callback.answer()  # –∑–∞–∫—Ä–∏–≤–∞—î 'loading...' —É Telegram


@router.callback_query(F.data == "confirm_data")
async def handle_confirmed_data(callback: CallbackQuery):
    user_id = callback.from_user.id

    # –í–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ø–∞–ø–∫–∏ temp
    for filename in os.listdir(TEMP_DIR):
        if filename.startswith(str(user_id)):
            file_path = os.path.join(TEMP_DIR, filename)
            try:
                os.remove(file_path)
            except Exception as e:
                print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ {file_path}: {e}")

    # –ì–µ–Ω–µ—Ä—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å AI
    prompt = (
        "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö. "
        "–ü–æ–≤—ñ–¥–æ–º, —â–æ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –∞–≤—Ç–æ—Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω–æ–≤–∏—Ç—å 100 –¥–æ–ª–∞—Ä—ñ–≤ –°–®–ê. "
        "–î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–∂–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω—ñ, —Ç–æ–º—É –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É. "
        "–ó–∞–ø—Ä–æ–ø–æ–Ω—É–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –æ–±—Ä–∞—Ç–∏, —â–æ –≤—ñ–Ω —Ö–æ—á–µ –∑—Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ: "
        "–û—Ñ–æ—Ä–º–∏—Ç–∏ —Å—Ç—Ä–∞—Ö–æ–≤–∫—É –∞–±–æ –≤—ñ–¥–º–æ–≤–∏—Ç–∏—Å—è —á–µ—Ä–µ–∑ –Ω–µ–∑–≥–æ–¥—É –∑ —Ü—ñ–Ω–æ—é."
    )
    response = ask_ai(prompt)

    # –ö–Ω–æ–ø–∫–∏: –û—Ñ–æ—Ä–º–∏—Ç–∏ / –í–∏–π—Ç–∏
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="üìù –û—Ñ–æ—Ä–º–∏—Ç–∏ —Å—Ç—Ä–∞—Ö–æ–≤–∫—É", callback_data="proceed_insurance"),
            types.InlineKeyboardButton(text="üö™ –ù—ñ –Ω–µ –∑–≥–æ–¥–µ–Ω", callback_data="exit_bot"),
        ]
    ])

    await callback.message.answer(response, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "proceed_insurance")
async def proceed_with_insurance(callback: CallbackQuery):
    await callback.message.answer("‚úÖ –ß—É–¥–æ–≤–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∞–≤—Ç–æ—Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è...")
    await callback.answer()

@router.callback_query(F.data == "exit_bot")
async def exit_bot(callback: CallbackQuery):
    await callback.message.answer("üòî –®–∫–æ–¥–∞, —â–æ –º–∏ –Ω–µ –∑–º–æ–≥–ª–∏ –¥–æ–ø–æ–º–æ–≥—Ç–∏. –Ø–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—Ç–µ ‚Äî –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –±—É–¥—å-–∫–æ–ª–∏!")
    await callback.answer()
