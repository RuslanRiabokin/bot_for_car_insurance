import os
from aiogram import Router, F
from aiogram.types import FSInputFile
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from services.mindee_service import extract_data_from_image_mock

from services.policy_generator import generate_policy_pdf


router = Router()

# –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π (–ø–æ user_id)
user_state = {}

def get_confirmation_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm_data"),
            InlineKeyboardButton(text="‚ùå –ó–º—ñ–Ω–∏—Ç–∏", callback_data="reject_data")
        ]
    ])

def get_price_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –¢–∞–∫, –∑–≥–æ–¥–µ–Ω", callback_data="price_yes"),
            InlineKeyboardButton(text="‚ùå –ù—ñ", callback_data="price_no")
        ]
    ])

def get_price_retry_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–≥–æ–¥–∂—É—é—Å—å", callback_data="price_yes"),
            InlineKeyboardButton(text="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è", callback_data="cancel_process")
        ]
    ])

# üì• –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(F.text == "/start")
async def start_command(message: Message):
    user_state[message.from_user.id] = "waiting_for_passport"
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø –¥–æ–ø–æ–º–æ–∂—É –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∞–≤—Ç–æ—Å—Ç—Ä–∞—Ö–æ–≤–∫—É. –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ üì∑")

# üì∏ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Ñ–æ—Ç–æ
@router.message(F.photo)
async def handle_photo(message: Message):
    user_id = message.from_user.id
    state = user_state.get(user_id)

    if not state:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start.")
        return

    # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É temp/ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    TEMP_DIR = os.path.join(os.getcwd(), "temp")
    os.makedirs(TEMP_DIR, exist_ok=True)

    photo = message.photo[-1]

    if state == "waiting_for_passport":
        passport_path = os.path.join(TEMP_DIR, f"passport_{user_id}.jpg")
        await message.bot.download(photo.file_id, destination=passport_path)
        user_state[user_id] = "waiting_for_registration"
        await message.answer("‚úÖ –ü–∞—Å–ø–æ—Ä—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ. –¢–µ–ø–µ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞ üìÑ")

    elif state == "waiting_for_registration":
        reg_path = os.path.join(TEMP_DIR, f"registration_{user_id}.jpg")
        await message.bot.download(photo.file_id, destination=reg_path)
        user_state[user_id] = "confirming"

        # –ü—É—Ç–∏ –∫ –æ–±–æ–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
        passport_path = os.path.join(TEMP_DIR, f"passport_{user_id}.jpg")
        reg_path = os.path.join(TEMP_DIR, f"registration_{user_id}.jpg")

        extracted_data = extract_data_from_image_mock(passport_path, reg_path)
        formatted = "\n".join([f"<b>{k}</b>: {v}" for k, v in extracted_data.items()])
        await message.answer(
            f"üîç –û—Å—å —â–æ –≤–¥–∞–ª–æ—Å—è –≤–∏—Ç—è–≥—Ç–∏ –∑ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤:\n\n{formatted}\n\n–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞.",
            parse_mode="HTML",
            reply_markup=get_confirmation_keyboard()
        )

# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
@router.callback_query(F.data == "confirm_data")
async def handle_confirm(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_state[user_id] = "confirmed"

    # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.edit_reply_markup()

    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã
    temp_dir = os.path.join(os.getcwd(), "temp")
    for doc in ["passport", "registration"]:
        try:
            os.remove(os.path.join(temp_dir, f"{doc}_{user_id}.jpg"))
        except FileNotFoundError:
            pass

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    user_state[user_id] = "waiting_price_confirmation"
    await callback.message.answer(
        "üíµ –í–∞—Ä—Ç—ñ—Å—Ç—å –∞–≤—Ç–æ—Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω–æ–≤–∏—Ç—å <b>100 USD</b>.\n–í–∏ –∑–≥–æ–¥–Ω—ñ –∑ —Ü—ñ—î—é —Ü—ñ–Ω–æ—é?",
        parse_mode="HTML",
        reply_markup=get_price_keyboard()
    )


@router.callback_query(F.data == "reject_data")
async def handle_reject(callback: CallbackQuery):
    """Processing refusal and request to resend documents"""
    user_id = callback.from_user.id
    user_state[user_id] = "waiting_for_passport"

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ñ–æ—Ç–æ
    temp_dir = os.path.join(os.getcwd(), "temp")
    for doc in ["passport", "registration"]:
        try:
            os.remove(os.path.join(temp_dir, f"{doc}_{user_id}.jpg"))
        except FileNotFoundError:
            pass

    await callback.message.edit_reply_markup()
    await callback.message.answer("‚ùå –ó—Ä–æ–∑—É–º—ñ–ª–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–Ω–æ–≤—É –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ üì∑")


@router.callback_query(F.data == "price_yes")
async def confirm_policy_and_send_pdf(callback: CallbackQuery):
    """Generates and sends the insurance policy PDF to the user"""
    user_id = callback.from_user.id
    await callback.message.edit_reply_markup()
    await callback.message.answer("‚úÖ –î—è–∫—É—é –∑–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è. –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å—Ç—Ä–∞—Ö–æ–≤–æ–≥–æ –ø–æ–ª—ñ—Å—É...")

    # –¢–∏–º—á–∞—Å–æ–≤—ñ —à–ª—è—Ö–∏ –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å
    temp_dir = os.path.join(os.getcwd(), "temp")
    passport_path = os.path.join(temp_dir, f"passport_{user_id}.jpg")
    reg_path = os.path.join(temp_dir, f"registration_{user_id}.jpg")

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è PDF
    pdf_path = os.path.join(temp_dir, f"policy_{user_id}.pdf")
    generate_policy_pdf(passport_path, reg_path, pdf_path)

    # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è PDF
    if os.path.exists(pdf_path):
        pdf_input = FSInputFile(pdf_path)
        await callback.message.answer_document(pdf_input, caption="üìÑ –û—Å—å –≤–∞—à —Å—Ç—Ä–∞—Ö–æ–≤–∏–π –ø–æ–ª—ñ—Å")
    else:
        await callback.message.answer(
            "–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ PDF —Ñ–∞–π–ª —Å—Ç—Ä–∞—Ö–æ–≤–æ–≥–æ –ø–æ–ª—ñ—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.")

    # –û—á–∏—â–µ–Ω–Ω—è
    for file in [passport_path, reg_path, pdf_path]:
        try:
            os.remove(file)
        except FileNotFoundError:
            pass

    user_state[user_id] = None

# ‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–≥–æ–¥–µ–Ω –∑ —Ü—ñ–Ω–æ—é
@router.callback_query(F.data == "price_no")
async def handle_price_no(callback: CallbackQuery):
    user_state[callback.from_user.id] = "price_rejected"
    await callback.message.edit_reply_markup()
    await callback.message.answer(
        "üòî –í–∏–±–∞—á—Ç–µ, —Ü—ñ–Ω–∞ <b>—Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞</b> —ñ –Ω–µ –ø—ñ–¥–ª—è–≥–∞—î –∑–º—ñ–Ω—ñ.\n\n"
        "–ë–∞–∂–∞—î—Ç–µ –≤—Å–µ –∂ –ø–æ–≥–æ–¥–∏—Ç–∏—Å—å —á–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è?",
        parse_mode="HTML",
        reply_markup=get_price_retry_keyboard()
    )

# ‚ùå –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è
@router.callback_query(F.data == "cancel_process")
async def handle_cancel(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_state.pop(user_id, None)
    await callback.message.edit_reply_markup()
    await callback.message.answer("üö´ –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –Ø–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—Ç–µ ‚Äî –Ω–∞–ø–∏—à—ñ—Ç—å /start.")
