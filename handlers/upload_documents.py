import os
from aiogram import Router, F
from aiogram.types import Message
from services.mindee_service import extract_data_from_image_mock

router = Router()
user_state = {}

@router.message(F.text == "/start")
async def start_command(message: Message):
    user_state[message.from_user.id] = "waiting_for_passport"
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø –¥–æ–ø–æ–º–æ–∂—É –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∞–≤—Ç–æ—Å—Ç—Ä–∞—Ö–æ–≤–∫—É. –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ üì∑")

@router.message(F.photo)
async def handle_photo(message: Message):
    user_id = message.from_user.id
    state = user_state.get(user_id)

    if not state:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start.")
        return

    TEMP_DIR = os.path.join(os.getcwd(), "temp")
    os.makedirs(TEMP_DIR, exist_ok=True)

    photo = message.photo[-1]

    if state == "waiting_for_passport":
        passport_path = os.path.join(TEMP_DIR, f"passport_{user_id}.jpg")
        await message.bot.download(photo.file_id, destination=passport_path)
        user_state[user_id] = "waiting_for_registration"
        await message.answer("‚úÖ –ü–∞—Å–ø–æ—Ä—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ. –¢–µ–ø–µ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞ üìÑ")

    elif state == "waiting_for_registration":
        reg_path = os.path.join(TEMP_DIR, f"registration_{user_id}.jpg")
        await message.bot.download(photo.file_id, destination=reg_path)

        user_state[user_id] = "done"
        await message.answer("‚úÖ –¢–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ. –î—è–∫—É—é! –û–±—Ä–æ–±–ª—è—é –¥–æ–∫—É–º–µ–Ω—Ç–∏... üîÑ")

        # –í–∏–∫–ª–∏–∫ –º–æ–∫-—Ñ—É–Ω–∫—Ü—ñ—ó
        extracted_data = extract_data_from_image_mock(
            passport_path=os.path.join(TEMP_DIR, f"passport_{user_id}.jpg"),
            reg_path=reg_path
        )

        formatted = "\n".join([f"<b>{k}</b>: {v}" for k, v in extracted_data.items()])
        await message.answer(f"üîç –û—Å—å —â–æ –≤–¥–∞–ª–æ—Å—è –≤–∏—Ç—è–≥—Ç–∏ –∑ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤:\n\n{formatted}\n\n–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞.", parse_mode="HTML")
