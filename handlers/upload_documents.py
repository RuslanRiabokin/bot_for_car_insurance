import os
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from services.mindee_service import extract_data_from_image_mock

router = Router()

# –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π (–ø–æ user_id)
user_state = {}

def get_confirmation_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm_data"),
            InlineKeyboardButton(text="‚ùå –ó–º—ñ–Ω–∏—Ç–∏", callback_data="reject_data")
        ]
    ])

# üì• –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(F.text == "/start")
async def start_command(message: Message):
    user_state[message.from_user.id] = "waiting_for_passport"
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø –¥–æ–ø–æ–º–æ–∂—É –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∞–≤—Ç–æ—Å—Ç—Ä–∞—Ö–æ–≤–∫—É. –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ üì∑")

# üì∏ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Ñ–æ—Ç–æ
@router.message(F.photo)
async def handle_photo(message: Message):
    user_id = message.from_user.id
    state = user_state.get(user_id)

    if not state:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start.")
        return

    # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É temp/ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    TEMP_DIR = os.path.join(os.getcwd(), "temp")
    os.makedirs(TEMP_DIR, exist_ok=True)

    photo = message.photo[-1]

    if state == "waiting_for_passport":
        passport_path = os.path.join(TEMP_DIR, f"passport_{user_id}.jpg")
        await message.bot.download(photo.file_id, destination=passport_path)
        user_state[user_id] = "waiting_for_registration"
        await message.answer("‚úÖ –ü–∞—Å–ø–æ—Ä—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ. –¢–µ–ø–µ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞ üìÑ")

    elif state == "waiting_for_registration":
        reg_path = os.path.join(TEMP_DIR, f"registration_{user_id}.jpg")
        await message.bot.download(photo.file_id, destination=reg_path)
        user_state[user_id] = "confirming"

        # –ü—É—Ç–∏ –∫ –æ–±–æ–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
        passport_path = os.path.join(TEMP_DIR, f"passport_{user_id}.jpg")
        reg_path = os.path.join(TEMP_DIR, f"registration_{user_id}.jpg")

        extracted_data = extract_data_from_image_mock(passport_path, reg_path)
        formatted = "\n".join([f"<b>{k}</b>: {v}" for k, v in extracted_data.items()])
        await message.answer(
            f"üîç –û—Å—å —â–æ –≤–¥–∞–ª–æ—Å—è –≤–∏—Ç—è–≥—Ç–∏ –∑ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤:\n\n{formatted}\n\n–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞.",
            parse_mode="HTML",
            reply_markup=get_confirmation_keyboard()
        )

# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
@router.callback_query(F.data == "confirm_data")
async def handle_confirm(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_state[user_id] = "confirmed"

    # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.edit_reply_markup()

    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã
    temp_dir = os.path.join(os.getcwd(), "temp")
    for doc in ["passport", "registration"]:
        try:
            os.remove(os.path.join(temp_dir, f"{doc}_{user_id}.jpg"))
        except FileNotFoundError:
            pass

    await callback.message.answer("‚úÖ –î–∞–Ω—ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ. –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É...")


# ‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–∞–∑–∞ –∏ –ø—Ä–æ—Å—å–±–∞ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞–Ω–æ–≤–æ
@router.callback_query(F.data == "reject_data")
async def handle_reject(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_state[user_id] = "waiting_for_passport"

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ñ–æ—Ç–æ
    temp_dir = os.path.join(os.getcwd(), "temp")
    for doc in ["passport", "registration"]:
        try:
            os.remove(os.path.join(temp_dir, f"{doc}_{user_id}.jpg"))
        except FileNotFoundError:
            pass

    await callback.message.edit_reply_markup()
    await callback.message.answer("‚ùå –ó—Ä–æ–∑—É–º—ñ–ª–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–Ω–æ–≤—É –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ üì∑")
