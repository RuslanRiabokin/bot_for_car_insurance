import logging
import os
import re

from aiogram import Router, F
from aiogram.enums.content_type import ContentType
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, FSInputFile

from ai_provider import ask_ai, reset_chat_history
from ai_states import AIAssistantState
from services.pdf_generator import generate_insurance_pdf

router = Router()


@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """
        Handles the /start command. Initializes user state and prompts for documents.
        """
    await state.clear()
    await state.set_state(AIAssistantState.waiting_for_documents)
    await state.update_data(documents=[], chat_history=[])
    await message.answer(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –∑ –∞–≤—Ç–æ—Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º.\n\n"
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ üìÑ —Ç–∞ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞"
    )


@router.message(F.content_type.in_({ContentType.PHOTO, ContentType.DOCUMENT}))
async def handle_documents(message: Message, state: FSMContext):
    """
        Handles photo or document uploads from the user.
        Once two documents are received, mock data is extracted and shown for confirmation.
        """
    data = await state.get_data()
    documents = data.get("documents", [])

    file_id = (
        message.document.file_id if message.document else message.photo[-1].file_id
    )
    documents.append(file_id)
    await state.update_data(documents=documents)

    if len(documents) == 1:
        ai_reply = await ask_ai("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–¥—ñ—Å–ª–∞–≤ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞.", state)
        await message.answer(ai_reply)

    elif len(documents) == 2:
        await state.set_state(AIAssistantState.documents_received)

        extracted_info = {
            "–ü–Ü–ë": "–ë–æ–Ω–¥–∞—Ä–µ–Ω–∫–æ –í–∞—Å–∏–ª—å –í–∞—Å–∏–ª—å–æ–≤–∏—á",
            "–ù–æ–º–µ—Ä –∞–≤—Ç–æ": "KE1234AE",
            "VIN": "VF1ABC1234567890",
            "–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è": "01.01.1990"
        }
        await state.update_data(extracted_info=extracted_info)

        confirmation_msg = (
            "–û—Å—å –¥–∞–Ω—ñ, —è–∫—ñ —è –≤–∏—Ç—è–≥–Ω—É–≤ —ñ–∑ –≤–∞—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —ó—Ö —É–≤–∞–∂–Ω–æ.\n\n"
            f"–ü–Ü–ë: {extracted_info['–ü–Ü–ë']}\n"
            f"–ù–æ–º–µ—Ä –∞–≤—Ç–æ: {extracted_info['–ù–æ–º–µ—Ä –∞–≤—Ç–æ']}\n"
            f"VIN: {extracted_info['VIN']}\n"
            f"–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: {extracted_info['–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è']}\n\n"
            "‚úÖ –Ø–∫—â–æ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚Äî –Ω–∞–ø–∏—à—ñ—Ç—å, —â–æ –≤—Å–µ –≤—ñ—Ä–Ω–æ.\n"
            "‚ùå –Ø–∫—â–æ —î –ø–æ–º–∏–ª–∫–∞ ‚Äî –≤–∫–∞–∂—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è.\n\n"
            "–ß–µ–∫–∞—é –Ω–∞ –≤–∞—à –≤—ñ–¥–ø–æ–≤—ñ–¥—å! üòä"
        )

        ai_reply = await ask_ai(confirmation_msg, state)
        await message.answer(ai_reply)

    else:
        ai_reply = await ask_ai("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–¥—ñ—Å–ª–∞–≤ —â–µ –æ–¥–Ω–µ —Ñ–æ—Ç–æ.", state)
        await message.answer(ai_reply)


@router.message(F.text)
async def handle_text(message: Message, state: FSMContext):
    """
        Handles user text messages and delegates them to the AI.
        If AI suggests generating an insurance policy, triggers PDF creation.
        """
    text = message.text.strip()

    ai_reply = await ask_ai(text, state)
    await message.answer(ai_reply)


    if re.search(r"—Ñ–æ—Ä–º—É—é.*—Å—Ç—Ä–∞—Ö–æ–≤–∏–π –ø–æ–ª—ñ—Å", ai_reply.lower()):
        await send_pdf(message, state)

async def send_pdf(message: Message, state: FSMContext):
    """
        Generates and sends the insurance policy PDF to the user.
        Cleans up temporary files and resets conversation state afterward.
        """
    logging.info(f"[DEBUG] –í—Ö–æ–¥–∂—É —É send_pdf()")

    data = await state.get_data()
    extracted_info = data.get("extracted_info")

    if not extracted_info:
        await message.answer("‚ö†Ô∏è –î–∞–Ω—ñ –¥–ª—è –ø–æ–ª—ñ—Å—É –≤—ñ–¥—Å—É—Ç–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —Å–ø–æ—á–∞—Ç–∫—É.")
        return


    pdf_path = generate_insurance_pdf(extracted_info)
    logging.info(f"[DEBUG] PDF –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: {pdf_path}")

    try:
        input_file = FSInputFile(pdf_path)
        await message.answer("üì§ –ù–∞–¥—Å–∏–ª–∞—é –≤–∞—à —Å—Ç—Ä–∞—Ö–æ–≤–∏–π –ø–æ–ª—ñ—Å...")
        await message.answer_document(document=input_file, caption="üìÑ –í–∞—à —Å—Ç—Ä–∞—Ö–æ–≤–∏–π –ø–æ–ª—ñ—Å –≥–æ—Ç–æ–≤–∏–π!")

    except Exception as e:
        logging.exception("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ PDF:")
        await message.answer(f"‚ùó –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ PDF:\n{str(e)}", parse_mode="Markdown")

    finally:

        if os.path.exists(pdf_path):
            os.remove(pdf_path)
            logging.info(f"[DEBUG] –¢–∏–º—á–∞—Å–æ–≤–∏–π PDF –≤–∏–¥–∞–ª–µ–Ω–æ: {pdf_path}")

        await reset_chat_history(state)
        await state.clear()
        logging.info("[DEBUG] –°—Ç–∞–Ω –æ—á–∏—â–µ–Ω–æ")
