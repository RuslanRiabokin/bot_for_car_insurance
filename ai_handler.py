from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.enums.content_type import ContentType

from ai_states import AIAssistantState
from ai_provider import ask_ai

router = Router()


@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(AIAssistantState.waiting_for_documents)
    await state.update_data(documents=[], chat_history=[])
    await message.answer(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –∑ –∞–≤—Ç–æ—Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º.\n\n"
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ üìÑ —Ç–∞ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞"
    )


@router.message(F.content_type.in_({ContentType.PHOTO, ContentType.DOCUMENT}))
async def handle_documents(message: Message, state: FSMContext):
    data = await state.get_data()
    documents = data.get("documents", [])

    file_id = message.document.file_id if message.document else message.photo[-1].file_id
    documents.append(file_id)
    await state.update_data(documents=documents)

    if len(documents) == 1:
        user_msg = "–Ø –Ω–∞–¥—ñ—Å–ª–∞–≤ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞."
        ai_reply = await ask_ai(user_msg, state)
        await message.answer(ai_reply)

    elif len(documents) == 2:
        await state.set_state(AIAssistantState.documents_received)

        # –Ü–º—ñ—Ç–∞—Ü—ñ—è –≤–∏—Ç—è–≥–Ω—É—Ç–∏—Ö –¥–∞–Ω–∏—Ö
        extracted_info = {
            "–ü–Ü–ë": "–ë–æ–Ω–¥–∞—Ä–µ–Ω–∫–æ –í–∞—Å–∏–ª—å –í–∞—Å–∏–ª—å–æ–≤–∏—á",
            "–ù–æ–º–µ—Ä –∞–≤—Ç–æ": "KE1234AE",
            "VIN": "VF1ABC1234567890",
            "–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è": "01.01.1990"
        }
        await state.update_data(extracted_info=extracted_info)

        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –¥–∞–Ω–∏–º–∏, —è–∫—ñ —Ç—Ä–µ–±–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏
        user_msg_2 = (
            "–û—Å—å –¥–∞–Ω—ñ, —è–∫—ñ —è –≤–∏—Ç—è–≥–Ω—É–≤ —ñ–∑ –≤–∞—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —ó—Ö —É–≤–∞–∂–Ω–æ.\n\n"
            f"–ü–Ü–ë: {extracted_info['–ü–Ü–ë']}\n"
            f"–ù–æ–º–µ—Ä –∞–≤—Ç–æ: {extracted_info['–ù–æ–º–µ—Ä –∞–≤—Ç–æ']}\n"
            f"VIN: {extracted_info['VIN']}\n"
            f"–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: {extracted_info['–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è']}\n\n"
            "‚úÖ –Ø–∫—â–æ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚Äî –Ω–∞–ø–∏—à—ñ—Ç—å, —â–æ –≤—Å–µ –≤—ñ—Ä–Ω–æ.\n"
            "‚ùå –Ø–∫—â–æ —î –ø–æ–º–∏–ª–∫–∞ ‚Äî –≤–∫–∞–∂—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è.\n\n"
            "–ß–µ–∫–∞—é –Ω–∞ –≤–∞—à –≤—ñ–¥–ø–æ–≤—ñ–¥—å! üòä"
        )

        ai_reply_2 = await ask_ai(user_msg_2, state)
        await message.answer(ai_reply_2)



    else:
        user_msg = "–Ø –Ω–∞–¥—ñ—Å–ª–∞–≤ —â–µ –æ–¥–Ω–µ —Ñ–æ—Ç–æ."
        ai_reply = await ask_ai(user_msg, state)
        await message.answer(ai_reply)


@router.message(F.text)
async def handle_text(message: Message, state: FSMContext):
    current_state = await state.get_state()
    text = message.text.strip().lower()

    # –Ø–∫—â–æ –≤–∂–µ –æ—Ç—Ä–∏–º–∞–Ω–æ 2 –¥–æ–∫—É–º–µ–Ω—Ç–∏ —ñ —á–µ–∫–∞—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    if current_state == AIAssistantState.documents_received:
        if "–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é" in text or "–≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ" in text:
            await message.answer("‚úÖ –î—è–∫—É—é –∑–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è! –¢–µ–ø–µ—Ä —è –º–æ–∂—É –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –ø–æ–ª—ñ—Å–∞.")
            await ask_ai("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö.", state)
            return

        elif "—Ö–æ—á—É –∑–º—ñ–Ω–∏—Ç–∏" in text or "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ" in text or "–ø–æ–º–∏–ª–∫–∞" in text:
            await message.answer("‚ùå –ó—Ä–æ–∑—É–º—ñ–ª–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ —â–µ —Ä–∞–∑.")
            await state.set_state(AIAssistantState.waiting_for_documents)
            await state.update_data(documents=[], chat_history=[])
            await ask_ai("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–≤—ñ–¥–æ–º–∏–≤ –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –≤ –¥–∞–Ω–∏—Ö. –ü–æ—á–∏–Ω–∞—é –∑–±—ñ—Ä –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –∑–∞–Ω–æ–≤–æ.", state)
            return

    # –ó–≤–∏—á–∞–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    ai_reply = await ask_ai(message.text, state)
    await message.answer(ai_reply)
