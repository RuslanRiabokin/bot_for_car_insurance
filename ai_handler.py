import re
from aiogram import Router, F, types
from aiogram.filters import Command
from ai_provider import ask_ai

router = Router()
user_states = {}

@router.message(Command("ask"))
async def cmd_ask_ai(message: types.Message):
    user_states[message.from_user.id] = "waiting_ai_question"
    await message.answer(
        "‚úçÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –¥–æ AI (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: *–Ø–∫—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥–ª—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏?*)",
        parse_mode="Markdown"
    )

@router.message(F.text)
async def handle_ai_question(message: types.Message):
    user_id = message.from_user.id
    if user_states.get(user_id) == "waiting_ai_question":
        question = message.text
        await message.answer("ü§ñ –î—É–º–∞—é –Ω–∞–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é...")

        try:
            response = ask_ai(question)
        except Exception as e:
            await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ AI: {e}")
            return

        clean_response = re.sub(r"<!--.*?-->", "", response, flags=re.DOTALL)
        clean_response = re.sub(r"<[^>]+>", "", clean_response)

        await message.answer(clean_response.strip())
        user_states[user_id] = None
